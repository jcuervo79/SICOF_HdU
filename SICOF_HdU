<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matriz de Relaciones SICOF LITE</title>
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-color: #ecf0f1;
            --dark-color: #34495e;
            --success-color: #2ecc71;
            --warning-color: #f1c40f;
            --gray-color: #95a5a6;
            --font-main: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-main);
            background-color: #f5f7fa;
            color: var(--dark-color);
            line-height: 1.6;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1.5rem 0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .main-title {
            font-size: 2.2rem;
            margin-bottom: 0.5rem;
            text-align: center;
        }

        .sub-title {
            font-size: 1.2rem;
            font-weight: 400;
            opacity: 0.9;
            text-align: center;
        }

        nav {
            background-color: var(--dark-color);
            padding: 0.8rem 0;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1.5rem;
            display: flex;
            justify-content: center;
        }

        .nav-links {
            display: flex;
            gap: 1.5rem;
            list-style: none;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            transition: background-color 0.3s, color 0.3s;
        }

        .nav-links a:hover, .nav-links a.active {
            background-color: var(--secondary-color);
        }

        main {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1.5rem;
        }

        .section {
            margin-bottom: 3rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: none;
        }

        .section.active {
            display: block;
        }

        .section-header {
            background-color: var(--secondary-color);
            color: white;
            padding: 1rem 1.5rem;
            font-size: 1.3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .search-container {
            display: flex;
            gap: 10px;
        }

        .search-container input {
            padding: 0.5rem;
            border: none;
            border-radius: 4px;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .section-content {
            padding: 1.5rem;
        }

        .card-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            border-left: 5px solid var(--secondary-color);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
            border-bottom: 2px solid var(--light-color);
            padding-bottom: 0.5rem;
        }

        .card-content {
            font-size: 0.95rem;
        }

        .card p {
            margin-bottom: 0.5rem;
        }

        .card p:last-child {
            margin-bottom: 0;
        }

        .tag-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .tag {
            background-color: var(--light-color);
            color: var(--dark-color);
            padding: 0.3rem 0.6rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }

        .tag.need {
            background-color: #d4e6f1;
            color: #2874a6;
        }

        .tag.req {
            background-color: #d5f5e3;
            color: #1e8449;
        }

        .tag.story {
            background-color: #fcf3cf;
            color: #b7950b;
        }

        .tag:hover {
            filter: brightness(0.9);
        }

        .table-responsive {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5rem;
        }

        th, td {
            padding: 0.8rem 1rem;
            text-align: left;
            border-bottom: 1px solid var(--light-color);
        }

        th {
            background-color: var(--light-color);
            font-weight: 600;
            color: var(--primary-color);
        }

        tr:nth-child(even) {
            background-color: #f8fafc;
        }

        tr:hover {
            background-color: #eaeff5;
        }

        .priority-high {
            background-color: rgba(231, 76, 60, 0.1);
            border-left: 3px solid var(--accent-color);
        }

        .priority-medium {
            background-color: rgba(243, 156, 18, 0.1);
            border-left: 3px solid var(--warning-color);
        }

        .priority-low {
            background-color: rgba(46, 204, 113, 0.1);
            border-left: 3px solid var(--success-color);
        }

        .relationship-diagram {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .relationship-title {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
            border-bottom: 2px solid var(--light-color);
            padding-bottom: 0.5rem;
        }

        .visual-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .visual-relationship {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-container {
            margin-bottom: 1.5rem;
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .filter-button {
            background-color: var(--light-color);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }

        .filter-button.active {
            background-color: var(--secondary-color);
            color: white;
        }

        .back-to-top {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background-color: var(--primary-color);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.3s, transform 0.3s;
            text-decoration: none;
        }

        .back-to-top.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* Matriz de relaciones */
        .relationship-matrix {
            overflow-x: auto;
            margin-top: 1.5rem;
        }

        .matrix-container {
            display: grid;
            grid-template-columns: 200px repeat(auto-fill, minmax(120px, 1fr));
            gap: 1px;
            background-color: var(--light-color);
        }

        .matrix-header, .matrix-left, .matrix-cell {
            padding: 0.8rem;
            background-color: white;
        }

        .matrix-header {
            font-weight: 600;
            text-align: center;
            background-color: var(--primary-color);
            color: white;
        }

        .matrix-left {
            font-weight: 600;
            background-color: var(--dark-color);
            color: white;
        }

        .matrix-cell {
            text-align: center;
        }

        .matrix-cell.has-relation {
            background-color: var(--secondary-color);
            color: white;
            cursor: pointer;
        }

        .element-details {
            display: none;
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-top: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-left: 5px solid var(--secondary-color);
        }

        .element-details.active {
            display: block;
        }

        .detail-title {
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
            border-bottom: 2px solid var(--light-color);
            padding-bottom: 0.5rem;
        }

        .related-elements {
            margin-top: 1rem;
        }

        .related-element {
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            background-color: var(--light-color);
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
        }

        @media (max-width: 768px) {
            .nav-links {
                gap: 0.8rem;
            }

            .card-container {
                grid-template-columns: 1fr;
            }

            .main-title {
                font-size: 1.8rem;
            }

            .sub-title {
                font-size: 1rem;
            }

            .matrix-container {
                grid-template-columns: 150px repeat(auto-fill, minmax(80px, 1fr));
            }

            .matrix-header, .matrix-left, .matrix-cell {
                padding: 0.5rem;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1 class="main-title">Matriz de Relaciones SICOF LITE</h1>
            <p class="sub-title">Sistema Integrado de Control y Fiscalización</p>
        </div>
    </header>
    
    <nav>
        <div class="nav-container">
            <ul class="nav-links">
                <li><a href="#" class="nav-link active" data-section="necesidades">Necesidades</a></li>
                <li><a href="#" class="nav-link" data-section="requerimientos">Requerimientos</a></li>
                <li><a href="#" class="nav-link" data-section="historias">Historias de Usuario</a></li>
                <li><a href="#" class="nav-link" data-section="relaciones">Relaciones</a></li>
                <li><a href="#" class="nav-link" data-section="matriz">Matriz</a></li>
            </ul>
        </div>
    </nav>
    
    <main>
        <!-- Sección de Necesidades -->
        <section id="necesidades" class="section active">
            <div class="section-header">
                <h2>Necesidades Identificadas</h2>
                <div class="search-container">
                    <input type="text" id="searchNeeds" placeholder="Buscar necesidades...">
                </div>
            </div>
            <div class="section-content">
                <div class="card-container" id="needsContainer">
                    <!-- Las tarjetas se generan dinámicamente con JavaScript -->
                </div>
            </div>
        </section>
        
        <!-- Sección de Requerimientos -->
        <section id="requerimientos" class="section">
            <div class="section-header">
                <h2>Requerimientos</h2>
                <div class="search-container">
                    <input type="text" id="searchReqs" placeholder="Buscar requerimientos...">
                </div>
            </div>
            <div class="section-content">
                <div class="filter-container">
                    <button class="filter-button active" data-filter="all">Todos</button>
                    <button class="filter-button" data-filter="functional">Funcionales</button>
                    <button class="filter-button" data-filter="nonfunctional">No Funcionales</button>
                </div>
                <div class="card-container" id="reqsContainer">
                    <!-- Las tarjetas se generan dinámicamente con JavaScript -->
                </div>
            </div>
        </section>
        
        <!-- Sección de Historias de Usuario -->
        <section id="historias" class="section">
            <div class="section-header">
                <h2>Historias de Usuario</h2>
                <div class="search-container">
                    <input type="text" id="searchStories" placeholder="Buscar historias...">
                </div>
            </div>
            <div class="section-content">
                <div class="filter-container">
                    <button class="filter-button active" data-filter="all">Todas</button>
                    <button class="filter-button" data-filter="high">Prioridad Alta</button>
                    <button class="filter-button" data-filter="medium">Prioridad Media</button>
                    <button class="filter-button" data-filter="low">Prioridad Baja</button>
                </div>
                <div class="table-responsive">
                    <table id="storiesTable">
                        <thead>
                            <tr>
                                <th>Código</th>
                                <th>Historia de Usuario</th>
                                <th>Req. Asociado</th>
                                <th>Prioridad</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Las filas se generan dinámicamente con JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
        
        <!-- Sección de Relaciones -->
        <section id="relaciones" class="section">
            <div class="section-header">
                <h2>Mapa de Relaciones</h2>
            </div>
            <div class="section-content">
                <div class="relationship-diagram">
                    <h3 class="relationship-title">Cadenas de Trazabilidad</h3>
                    <div class="visual-container" id="relationshipContainer">
                        <!-- Las relaciones se generan dinámicamente con JavaScript -->
                    </div>
                </div>
                <div class="element-details" id="elementDetails">
                    <h3 class="detail-title" id="detailTitle">Detalles</h3>
                    <p id="detailDescription"></p>
                    <div class="related-elements" id="relatedElements">
                        <!-- Los elementos relacionados se generan dinámicamente -->
                    </div>
                </div>
            </div>
        </section>
        
        <!-- Sección de Matriz -->
        <section id="matriz" class="section">
            <div class="section-header">
                <h2>Matriz de Trazabilidad</h2>
            </div>
            <div class="section-content">
                <div class="filter-container">
                    <button class="filter-button active" data-matrix="needs-reqs">Necesidades vs Requerimientos</button>
                    <button class="filter-button" data-matrix="reqs-stories">Requerimientos vs Historias</button>
                </div>
                <div class="relationship-matrix" id="needsReqsMatrix">
                    <!-- La matriz se genera dinámicamente con JavaScript -->
                </div>
                <div class="relationship-matrix" id="reqsStoriesMatrix" style="display: none;">
                    <!-- La matriz se genera dinámicamente con JavaScript -->
                </div>
            </div>
        </section>
    </main>
    
    <a href="#" class="back-to-top" id="backToTop">↑</a>

    <script>
        // Inicializar la aplicación
        document.addEventListener('DOMContentLoaded', function() {
            renderNeedsSection();
            renderReqsSection();
            renderStoriesSection();
            renderRelationshipsSection();
            renderMatrixSection();
            setupNavigation();
            setupScrollBehavior();
            setupSearch();
            setupFilters();
        });

        // Renderizar sección de Necesidades
        function renderNeedsSection() {
            const container = document.getElementById('needsContainer');
            container.innerHTML = '';
            
            necesidades.forEach(need => {
                const relatedReqs = need.requerimientos.map(reqId => {
                    const req = requerimientos.find(r => r.id === reqId);
                    return req ? req.titulo : '';
                }).join(', ');
                
                const card = document.createElement('div');
                card.className = 'card';
                card.innerHTML = `
                    <h3 class="card-title">${escapeHtml(need.id)}: ${escapeHtml(need.titulo)}</h3>
                    <div class="card-content">
                        <p>${escapeHtml(need.descripcion)}</p>
                        <p><strong>Requerimientos relacionados:</strong> ${escapeHtml(relatedReqs)}</p>
                        <div class="tag-container">
                            ${need.requerimientos.map(reqId => `<span class="tag req" data-id="${reqId}">${reqId}</span>`).join('')}
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
            
            // Añadir event listeners para los tags
            document.querySelectorAll('#needsContainer .tag').forEach(tag => {
                tag.addEventListener('click', function() {
                    const reqId = this.getAttribute('data-id');
                    navigateToSection('requerimientos');
                    highlightElement(reqId);
                });
            });
        }

        // Renderizar sección de Requerimientos
        function renderReqsSection() {
            const container = document.getElementById('reqsContainer');
            container.innerHTML = '';
            
            requerimientos.forEach(req => {
                const relatedNeeds = req.necesidades.map(needId => {
                    const need = necesidades.find(n => n.id === needId);
                    return need ? need.titulo : '';
                }).join(', ');
                
                const relatedStories = req.historias.map(storyId => {
                    const story = historias.find(s => s.id === storyId);
                    return story ? story.titulo : '';
                }).join(', ');
                
                const card = document.createElement('div');
                card.className = `card ${req.tipo === 'nonfunctional' ? 'nonfunctional' : 'functional'}`;
                card.setAttribute('data-id', req.id);
                card.setAttribute('data-type', req.tipo);
                card.innerHTML = `
                    <h3 class="card-title">${escapeHtml(req.id)}: ${escapeHtml(req.titulo)}</h3>
                    <div class="card-content">
                        <p>${escapeHtml(req.descripcion)}</p>
                        <p><strong>Tipo:</strong> ${req.tipo === 'functional' ? 'Funcional' : 'No Funcional'}</p>
                        <p><strong>Necesidades relacionadas:</strong> ${escapeHtml(relatedNeeds) || 'Ninguna'}</p>
                        <p><strong>Historias relacionadas:</strong> ${escapeHtml(relatedStories) || 'Ninguna'}</p>
                        <div class="tag-container">
                            ${req.necesidades.map(needId => `<span class="tag need" data-id="${needId}">${needId}</span>`).join('')}
                            ${req.historias.map(storyId => `<span class="tag story" data-id="${storyId}">${storyId}</span>`).join('')}
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
            
            // Añadir event listeners para los tags
            document.querySelectorAll('#reqsContainer .tag.need').forEach(tag => {
                tag.addEventListener('click', function() {
                    const needId = this.getAttribute('data-id');
                    navigateToSection('necesidades');
                    highlightElement(needId);
                });
            });
            
            document.querySelectorAll('#reqsContainer .tag.story').forEach(tag => {
                tag.addEventListener('click', function() {
                    const storyId = this.getAttribute('data-id');
                    navigateToSection('historias');
                    highlightElement(storyId);
                });
            });
        }

        // Renderizar sección de Historias de Usuario
        function renderStoriesSection() {
            const tbody = document.querySelector('#storiesTable tbody');
            tbody.innerHTML = '';
            
            historias.forEach(story => {
                const tr = document.createElement('tr');
                tr.className = story.prioridad === 'Alta' ? 'priority-high' : story.prioridad === 'Media' ? 'priority-medium' : 'priority-low';
                tr.setAttribute('data-id', story.id);
                tr.setAttribute('data-priority', story.prioridad.toLowerCase());
                
                tr.innerHTML = `
                    <td>${escapeHtml(story.id)}</td>
                    <td><strong>${escapeHtml(story.titulo)}</strong><br><small>${escapeHtml(story.descripcion)}</small></td>
                    <td>${escapeHtml(story.requerimiento)}</td>
                    <td>${escapeHtml(story.prioridad)}</td>
                `;
                tbody.appendChild(tr);
                
                // Añadir event listener para la fila
                tr.addEventListener('click', function() {
                    const reqId = story.requerimiento;
                    const req = requerimientos.find(r => r.id === reqId);
                    
                    showElementDetails(story.id, story.titulo, story.descripcion, [
                        { title: 'Requerimiento Asociado', elements: [{ id: reqId, title: req ? req.titulo : reqId }] },
                        { title: 'Prioridad', elements: [{ id: story.prioridad, title: story.prioridad }] }
                    ]);
                });
            });
        }

        // Renderizar sección de Relaciones
        function renderRelationshipsSection() {
            const container = document.getElementById('relationshipContainer');
            container.innerHTML = '';
            
            // Crear cadenas de trazabilidad para cada necesidad
            necesidades.forEach(need => {
                const visualRelationship = document.createElement('div');
                visualRelationship.className = 'visual-relationship';
                
                let content = `<h4>${escapeHtml(need.id)}: ${escapeHtml(need.titulo)}</h4><div class="tag-container">`;
                
                // Añadir requerimientos relacionados
                need.requerimientos.forEach(reqId => {
                    const req = requerimientos.find(r => r.id === reqId);
                    if (req) {
                        content += `<span class="tag req" data-id="${reqId}">${reqId}</span>`;
                        
                        // Añadir historias relacionadas a cada requerimiento
                        req.historias.forEach(storyId => {
                            const story = historias.find(s => s.id === storyId);
                            if (story) {
                                content += `<span class="tag story" data-id="${storyId}">${storyId}</span>`;
                            }
                        });
                    }
                });
                
                content += '</div>';
                visualRelationship.innerHTML = content;
                container.appendChild(visualRelationship);
            });
            
            // Añadir event listeners para los tags
            document.querySelectorAll('#relationshipContainer .tag.req').forEach(tag => {
                tag.addEventListener('click', function() {
                    const reqId = this.getAttribute('data-id');
                    const req = requerimientos.find(r => r.id === reqId);
                    
                    if (req) {
                        // Mostrar detalles del requerimiento
                        const relatedNeeds = req.necesidades.map(needId => {
                            const need = necesidades.find(n => n.id === needId);
                            return need ? { id: needId, title: need.titulo } : { id: needId, title: needId };
                        });
                        
                        const relatedStories = req.historias.map(storyId => {
                            const story = historias.find(s => s.id === storyId);
                            return story ? { id: storyId, title: story.titulo } : { id: storyId, title: storyId };
                        });
                        
                        showElementDetails(req.id, req.titulo, req.descripcion, [
                            { title: 'Necesidades Relacionadas', elements: relatedNeeds },
                            { title: 'Historias Relacionadas', elements: relatedStories }
                        ]);
                    }
                });
            });
            
            document.querySelectorAll('#relationshipContainer .tag.story').forEach(tag => {
                tag.addEventListener('click', function() {
                    const storyId = this.getAttribute('data-id');
                    const story = historias.find(s => s.id === storyId);
                    
                    if (story) {
                        const reqId = story.requerimiento;
                        const req = requerimientos.find(r => r.id === reqId);
                        
                        showElementDetails(story.id, story.titulo, story.descripcion, [
                            { title: 'Requerimiento Asociado', elements: [{ id: reqId, title: req ? req.titulo : reqId }] },
                            { title: 'Prioridad', elements: [{ id: story.prioridad, title: story.prioridad }] }
                        ]);
                    }
                });
            });
        }

        // Renderizar sección de Matriz
        function renderMatrixSection() {
            // Matriz Necesidades vs Requerimientos
            const needsReqsMatrix = document.getElementById('needsReqsMatrix');
            needsReqsMatrix.innerHTML = '';
            
            const matrixContainer = document.createElement('div');
            matrixContainer.className = 'matrix-container';
            
            // Cabecera
            matrixContainer.innerHTML = '<div class="matrix-header">Necesidades / Reqs</div>';
            requerimientos.forEach(req => {
                matrixContainer.innerHTML += `<div class="matrix-header">${req.id}</div>`;
            });
            
            // Filas
            necesidades.forEach(need => {
                matrixContainer.innerHTML += `<div class="matrix-left">${need.id}</div>`;
                
                requerimientos.forEach(req => {
                    const hasRelation = need.requerimientos.includes(req.id);
                    matrixContainer.innerHTML += `<div class="matrix-cell ${hasRelation ? 'has-relation' : ''}" data-need="${need.id}" data-req="${req.id}">${hasRelation ? '✓' : ''}</div>`;
                });
            });
            
            needsReqsMatrix.appendChild(matrixContainer);
            
            // Matriz Requerimientos vs Historias
            const reqsStoriesMatrix = document.getElementById('reqsStoriesMatrix');
            reqsStoriesMatrix.innerHTML = '';
            
            const matrixContainer2 = document.createElement('div');
            matrixContainer2.className = 'matrix-container';
            
            // Cabecera
            matrixContainer2.innerHTML = '<div class="matrix-header">Reqs / Historias</div>';
            historias.forEach(story => {
                matrixContainer2.innerHTML += `<div class="matrix-header">${story.id}</div>`;
            });
            
            // Filas
            requerimientos.forEach(req => {
                matrixContainer2.innerHTML += `<div class="matrix-left">${req.id}</div>`;
                
                historias.forEach(story => {
                    const hasRelation = req.historias.includes(story.id);
                    matrixContainer2.innerHTML += `<div class="matrix-cell ${hasRelation ? 'has-relation' : ''}" data-req="${req.id}" data-story="${story.id}">${hasRelation ? '✓' : ''}</div>`;
                });
            });
            
            reqsStoriesMatrix.appendChild(matrixContainer2);
            
            // Añadir event listeners para las celdas
            document.querySelectorAll('.matrix-cell.has-relation').forEach(cell => {
                cell.addEventListener('click', function() {
                    const needId = this.getAttribute('data-need');
                    const reqId = this.getAttribute('data-req');
                    const storyId = this.getAttribute('data-story');
                    
                    if (needId && reqId) {
                        const need = necesidades.find(n => n.id === needId);
                        const req = requerimientos.find(r => r.id === reqId);
                        
                        if (need && req) {
                            showElementDetails(`${need.id}-${req.id}`, `Relación: ${need.id} - ${req.id}`, 
                                `La necesidad "${need.titulo}" está relacionada con el requerimiento "${req.titulo}".`, [
                                { title: 'Detalles de la Necesidad', elements: [{ id: need.id, title: need.titulo, description: need.descripcion }] },
                                { title: 'Detalles del Requerimiento', elements: [{ id: req.id, title: req.titulo, description: req.descripcion }] }
                            ]);
                        }
                    } else if (reqId && storyId) {
                        const req = requerimientos.find(r => r.id === reqId);
                        const story = historias.find(s => s.id === storyId);
                        
                        if (req && story) {
                            showElementDetails(`${req.id}-${story.id}`, `Relación: ${req.id} - ${story.id}`, 
                                `El requerimiento "${req.titulo}" está relacionado con la historia "${story.titulo}".`, [
                                { title: 'Detalles del Requerimiento', elements: [{ id: req.id, title: req.titulo, description: req.descripcion }] },
                                { title: 'Detalles de la Historia', elements: [{ id: story.id, title: story.titulo, description: story.descripcion }] }
                            ]);
                        }
                    }
                });
            });
        }

        // Mostrar detalles de un elemento
        function showElementDetails(id, title, description, relatedGroups) {
            const detailsContainer = document.getElementById('elementDetails');
            const detailTitle = document.getElementById('detailTitle');
            const detailDescription = document.getElementById('detailDescription');
            const relatedElements = document.getElementById('relatedElements');
            
            detailTitle.textContent = title;
            detailDescription.textContent = description;
            
            relatedElements.innerHTML = '';
            
            relatedGroups.forEach(group => {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'related-group';
                
                groupDiv.innerHTML = `<h4>${escapeHtml(group.title)}</h4>`;
                
                group.elements.forEach(element => {
                    const elementDiv = document.createElement('div');
                    elementDiv.className = 'related-element';
                    elementDiv.innerHTML = `
                        <span>${escapeHtml(element.id)}: ${escapeHtml(element.title)}</span>
                        ${element.description ? `<small>${escapeHtml(element.description)}</small>` : ''}
                    `;
                    groupDiv.appendChild(elementDiv);
                });
                
                relatedElements.appendChild(groupDiv);
            });
            
            detailsContainer.classList.add('active');
        }

        // Configurar navegación
        function setupNavigation() {
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const section = this.getAttribute('data-section');
                    navigateToSection(section);
                });
            });
        }

        // Navegar a una sección
        function navigateToSection(sectionId) {
            const sections = document.querySelectorAll('.section');
            const navLinks = document.querySelectorAll('.nav-link');
            
            sections.forEach(section => {
                section.classList.remove('active');
            });
            
            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('data-section') === sectionId) {
                    link.classList.add('active');
                }
            });
            
            document.getElementById(sectionId).classList.add('active');
        }

        // Resaltar un elemento
        function highlightElement(elementId) {
            // Limpiar resaltados anteriores
            document.querySelectorAll('.highlighted').forEach(el => {
                el.classList.remove('highlighted');
            });
            
            // Buscar y resaltar el elemento
            const elements = document.querySelectorAll(`[data-id="${elementId}"]`);
            elements.forEach(el => {
                el.classList.add('highlighted');
                el.scrollIntoView({ behavior: 'smooth', block: 'center' });
            });
        }

        // Configurar comportamiento de scroll
        function setupScrollBehavior() {
            const backToTop = document.getElementById('backToTop');
            
            window.addEventListener('scroll', function() {
                if (window.scrollY > 300) {
                    backToTop.classList.add('visible');
                } else {
                    backToTop.classList.remove('visible');
                }
            });
            
            backToTop.addEventListener('click', function(e) {
                e.preventDefault();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            });
        }

        // Configurar búsqueda
        function setupSearch() {
            // Búsqueda de necesidades
            document.getElementById('searchNeeds').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const cards = document.querySelectorAll('#needsContainer .card');
                
                cards.forEach(card => {
                    const title = card.querySelector('.card-title').textContent.toLowerCase();
                    const content = card.querySelector('.card-content').textContent.toLowerCase();
                    
                    if (title.includes(searchTerm) || content.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
            
            // Búsqueda de requerimientos
            document.getElementById('searchReqs').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const cards = document.querySelectorAll('#reqsContainer .card');
                
                cards.forEach(card => {
                    const title = card.querySelector('.card-title').textContent.toLowerCase();
                    const content = card.querySelector('.card-content').textContent.toLowerCase();
                    
                    if (title.includes(searchTerm) || content.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
            
            // Búsqueda de historias
            document.getElementById('searchStories').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const rows = document.querySelectorAll('#storiesTable tbody tr');
                
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    
                    if (text.includes(searchTerm)) {
                        row.style.display = 'table-row';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }

        // Configurar filtros
        function setupFilters() {
            // Filtros de requerimientos
            document.querySelectorAll('[data-filter]').forEach(button => {
                button.addEventListener('click', function() {
                    const filter = this.getAttribute('data-filter');
                    const buttonGroup = this.parentElement.querySelectorAll('.filter-button');
                    
                    buttonGroup.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    if (this.parentElement.closest('#requerimientos')) {
                        // Filtrar requerimientos
                        const cards = document.querySelectorAll('#reqsContainer .card');
                        
                        cards.forEach(card => {
                            if (filter === 'all' || card.getAttribute('data-type') === filter) {
                                card.style.display = 'block';
                            } else {
                                card.style.display = 'none';
                            }
                        });
                    } else if (this.parentElement.closest('#historias')) {
                        // Filtrar historias
                        const rows = document.querySelectorAll('#storiesTable tbody tr');
                        
                        rows.forEach(row => {
                            if (filter === 'all' || row.getAttribute('data-priority') === filter) {
                                row.style.display = 'table-row';
                            } else {
                                row.style.display = 'none';
                            }
                        });
                    }
                });
            });
            
            // Filtros de matriz
            document.querySelectorAll('[data-matrix]').forEach(button => {
                button.addEventListener('click', function() {
                    const matrix = this.getAttribute('data-matrix');
                    const buttonGroup = this.parentElement.querySelectorAll('.filter-button');
                    
                    buttonGroup.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    if (matrix === 'needs-reqs') {
                        document.getElementById('needsReqsMatrix').style.display = 'block';
                        document.getElementById('reqsStoriesMatrix').style.display = 'none';
                    } else {
                        document.getElementById('needsReqsMatrix').style.display = 'none';
                        document.getElementById('reqsStoriesMatrix').style.display = 'block';
                    }
                });
            });
        }
        // Funciones de utilidad
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        const necesidades = [
            { id: "N1", titulo: "Centralización y Gestión de Datos", descripcion: "Consolidar información dispersa en bases de datos únicas, estructuradas y compatibles con el gestor documental Control Doc.", requerimientos: ["RF01", "RF02", "RF03", "RF06", "RF14"] },
            { id: "N2", titulo: "Flujos de Trabajo y Asignación", descripcion: "Definir procesos claros y roles específicos para mejorar la trazabilidad y eficiencia.", requerimientos: ["RF02", "RF07"] },
            { id: "N3", titulo: "Trazabilidad de Trámites", descripcion: "Implementar mecanismos para rastrear y vincular información transaccional.", requerimientos: ["RF04", "RF11", "RF12"] },
            { id: "N4", titulo: "Control de Acceso y Seguridad", descripcion: "Garantizar la integridad y confidencialidad de la información.", requerimientos: ["RF01", "RF07"] },
            { id: "N5", titulo: "Consultas y Reportes", descripcion: "Proveer vistas claras y herramientas de análisis.", requerimientos: ["RF05", "RF10", "RF13"] },
            { id: "N6", titulo: "Reglas de Negocio y Validaciones", descripcion: "Impedir inconsistencias y errores en la gestión de trámites.", requerimientos: ["RF08"] },
            { id: "N7", titulo: "Interoperabilidad", descripcion: "Permitir conectividad y adaptación futura con otros sistemas.", requerimientos: ["RF06", "RF16"] },
            { id: "N8", titulo: "Usabilidad y Experiencia", descripcion: "Reducir la curva de aprendizaje y asegurar la adopción del sistema.", requerimientos: ["RF16", "RNF01"] },
            { id: "N9", titulo: "Gestión de Modalidades y Establecimientos", descripcion: "Mantener datos detallados y actualizados de los entes que interactúan.", requerimientos: ["RF03", "RF11"] },
            { id: "N10", titulo: "Gestión de Vigencias y Notificaciones", descripcion: "Garantizar el control de plazos legales y administrativos.", requerimientos: ["RF08", "RF09"] }
        ];

        const requerimientos = [
            { id: "RF01", titulo: "Gestión de Usuarios y Seguridad", descripcion: "Administración de usuarios mediante integración con Directorio Activo, estableciendo roles específicos con permisos diferenciados.", tipo: "functional", necesidades: ["N1", "N4"], historias: ["HU-01", "HU-22"] },
            { id: "RF02", titulo: "Registro y Seguimiento de Trámites", descripcion: "Registro automatizado de trámites con asignación de responsables y trazabilidad de estados.", tipo: "functional", necesidades: ["N1", "N2"], historias: ["HU-02", "HU-14"] },
            { id: "RF03", titulo: "Gestión de Inscripciones", descripcion: "Registro y administración de inscripciones con notificaciones automáticas y seguimiento del ciclo de vida.", tipo: "functional", necesidades: ["N1", "N9"], historias: ["HU-03", "HU-12", "HU-20"] },
            { id: "RF04", titulo: "Gestión de Novedades", descripcion: "Gestión y trazabilidad de novedades en inscripciones, incluyendo cambios en dirección técnica y representación legal.", tipo: "functional", necesidades: ["N3"], historias: ["HU-04"] },
            { id: "RF05", titulo: "Consultas y Reportes", descripcion: "Módulo de consultas avanzadas con filtros múltiples y generación de reportes automatizados.", tipo: "functional", necesidades: ["N5"], historias: ["HU-05", "HU-16"] },
            { id: "RF06", titulo: "Integración con Control Doc", descripcion: "Interoperabilidad con Control Doc para sincronización automática de radicados y documentos asociados.", tipo: "functional", necesidades: ["N1", "N7"], historias: ["HU-06", "HU-17"] },
            { id: "RF07", titulo: "Parametrización y Administración del Sistema", descripcion: "Configuración dinámica de catálogos, gestión de roles administrativos y auditoría de modificaciones.", tipo: "functional", necesidades: ["N2", "N4"], historias: ["HU-11", "HU-24"] },
            { id: "RF08", titulo: "Validaciones y Reglas de Negocio", descripcion: "Implementación de validaciones automatizadas para verificar consistencia de datos y cumplimiento normativo.", tipo: "functional", necesidades: ["N6", "N10"], historias: ["HU-07", "HU-13"] },
            { id: "RF09", titulo: "Notificaciones y Alertas", descripcion: "Sistema de alertas para vencimientos de trámites e inscripciones, con notificaciones por correo y dashboard.", tipo: "functional", necesidades: ["N10"], historias: ["HU-08", "HU-21"] },
            { id: "RF10", titulo: "Dashboard y Visualización", descripcion: "Visualización gráfica de métricas claves sobre estado de trámites y carga de trabajo.", tipo: "functional", necesidades: ["N5"], historias: ["HU-10"] },
            { id: "RF11", titulo: "Gestión de Novedades Específicas", descripcion: "Registro detallado de novedades específicas en establecimientos regulados, garantizando su trazabilidad.", tipo: "functional", necesidades: ["N3", "N9"], historias: ["HU-04"] },
            { id: "RF12", titulo: "Gestión de Relaciones entre Trámites", descripcion: "Establecimiento de relaciones formales entre trámites para asegurar la integridad del flujo procedimental.", tipo: "functional", necesidades: ["N3"], historias: ["HU-09"] },
            { id: "RF13", titulo: "Dashboard y Visualización de Datos", descripcion: "Visualización interactiva de métricas clave sobre estado de trámites y eficiencia operativa del sistema.", tipo: "functional", necesidades: ["N5"], historias: ["HU-10", "HU-18"] },
            { id: "RF14", titulo: "Gestión del Ciclo de Vida del Dato", descripcion: "Gestión del ciclo de vida de datos desde su creación hasta su eliminación, asegurando disponibilidad y cumplimiento normativo.", tipo: "functional", necesidades: ["N1"], historias: ["HU-15", "HU-19"] },
            { id: "RF15", titulo: "Escalabilidad y Mantenimiento", descripcion: "Arquitectura escalable y modular para soportar crecimiento en datos y usuarios sin reestructuración.", tipo: "nonfunctional", necesidades: [], historias: [] },
            { id: "RF16", titulo: "Integración y Adaptabilidad", descripcion: "Integración mediante APIs con sistemas externos, interoperabilidad con estándares y compatibilidad con diferentes dispositivos.", tipo: "functional", necesidades: ["N7", "N8"], historias: ["HU-23"] },
            { id: "RNF01", titulo: "Usabilidad y Experiencia", descripcion: "Interfaces intuitivas con diseño responsive y accesible según estándares WCAG 2.1.", tipo: "nonfunctional", necesidades: ["N8"], historias: ["HU-23"] }
        ];

        const historias = [
            { id: "HU-01", titulo: "Autenticación de Usuarios", descripcion: "Como usuario del área de Control y Fiscalización, quiero autenticarme en el sistema mediante el Directorio Activo institucional, para acceder a las funcionalidades según mi rol asignado sin necesidad de credenciales adicionales.", requerimiento: "RF01", prioridad: "Alta" },
            { id: "HU-02", titulo: "Registro de Trámites", descripcion: "Como gestor, quiero registrar nuevos trámites a partir del número de radicado e ID de control asignado por Control Doc, para iniciar su procesamiento y seguimiento en el sistema.", requerimiento: "RF02", prioridad: "Alta" },
            { id: "HU-03", titulo: "Gestión de Inscripciones", descripcion: "Como gestor, quiero registrar y administrar inscripciones derivadas de trámites aprobados, para mantener un control efectivo de los establecimientos autorizados y sus estados.", requerimiento: "RF03", prioridad: "Alta" },
            { id: "HU-04", titulo: "Gestión de Novedades", descripcion: "Como gestor, quiero registrar y dar seguimiento a novedades específicas de establecimientos inscritos (cambios de director técnico, representante legal o dirección), para mantener actualizada la información regulatoria.", requerimiento: "RF04", prioridad: "Media" },
            { id: "HU-05", titulo: "Consultas y Reportes", descripcion: "Como coordinador del área, quiero realizar consultas parametrizadas y generar reportes consolidados, para obtener información oportuna sobre el estado de los trámites y tomar decisiones basadas en datos.", requerimiento: "RF05", prioridad: "Media" },
            { id: "HU-06", titulo: "Integración con Control Doc", descripcion: "Como gestor, quiero que el sistema se sincronice automáticamente con Control Doc, para evitar la transcripción manual de información y garantizar la coherencia entre sistemas.", requerimiento: "RF06", prioridad: "Alta" },
            { id: "HU-07", titulo: "Validaciones Automáticas", descripcion: "Como gestor, quiero que el sistema valide automáticamente la información ingresada según reglas de negocio predefinidas, para prevenir inconsistencias y errores en el registro de datos.", requerimiento: "RF08", prioridad: "Media" },
            { id: "HU-08", titulo: "Gestión de Notificaciones", descripcion: "Como usuario, quiero recibir alertas y notificaciones sobre trámites próximos a vencer o tareas pendientes, para priorizar mi trabajo y evitar incumplimientos en plazos regulatorios.", requerimiento: "RF09", prioridad: "Alta" },
            { id: "HU-09", titulo: "Gestión de Relaciones entre Trámites", descripcion: "Como gestor, quiero establecer relaciones formales entre trámites (padre-hijo, alcances, modificaciones), para mantener la trazabilidad completa del ciclo de vida de cada proceso administrativo.", requerimiento: "RF12", prioridad: "Media" },
            { id: "HU-10", titulo: "Visualización Dashboard", descripcion: "Como coordinador, quiero visualizar métricas clave sobre la operación del área mediante tableros interactivos, para identificar eficientemente cuellos de botella y distribuir adecuadamente la carga de trabajo.", requerimiento: "RF13", prioridad: "Baja" },
            { id: "HU-11", titulo: "Parametrización del Sistema", descripcion: "Como administrador, quiero configurar los catálogos y parámetros del sistema, para adaptar su funcionamiento a cambios normativos o procedimentales sin requerir modificaciones en el código fuente.", requerimiento: "RF07", prioridad: "Baja" },
            { id: "HU-12", titulo: "Gestión de Modalidades", descripcion: "Como gestor, quiero registrar y administrar múltiples modalidades para un mismo establecimiento, para reflejar correctamente su configuración regulatoria y facilitar el control normativo.", requerimiento: "RF03", prioridad: "Baja" },
            { id: "HU-13", titulo: "Cálculo Automático de Fechas", descripcion: "Como gestor, quiero que el sistema calcule automáticamente fechas críticas (ejecutoria, vigencia, renovación), para garantizar precisión en los plazos regulatorios y generar alertas oportunas.", requerimiento: "RF08", prioridad: "Media" },
            { id: "HU-14", titulo: "Asignación de Trámites", descripcion: "Como coordinador, quiero asignar trámites a gestores específicos según su especialidad y carga de trabajo, para optimizar la distribución de tareas y el cumplimiento de tiempos.", requerimiento: "RF02", prioridad: "Media" },
            { id: "HU-15", titulo: "Seguimiento de Auditoría", descripcion: "Como administrador, quiero que el sistema registre automáticamente todas las acciones realizadas (quién, cuándo, qué), para mantener trazabilidad completa de las modificaciones y facilitar procesos de auditoría.", requerimiento: "RF14", prioridad: "Baja" },
            { id: "HU-16", titulo: "Exportación de Datos", descripcion: "Como gestor, quiero exportar resultados de consultas a formatos estándar como Excel, para realizar análisis adicionales o generar informes personalizados fuera del sistema.", requerimiento: "RF05", prioridad: "Media" },
            { id: "HU-17", titulo: "Gestión de Documentos Adjuntos", descripcion: "Como gestor, quiero vincular documentos adjuntos a los trámites e inscripciones, para mantener completa la información documental y facilitar su consulta integrada.", requerimiento: "RF06", prioridad: "Media" },
            { id: "HU-18", titulo: "Semáforo de Estados", descripcion: "Como usuario, quiero visualizar indicadores tipo semáforo para los trámites según su estado y tiempo transcurrido, para identificar rápidamente aquellos que requieren atención prioritaria.", requerimiento: "RF13", prioridad: "Baja" },
            { id: "HU-19", titulo: "Historial de Cambios", descripcion: "Como gestor, quiero consultar el historial completo de modificaciones realizadas a una inscripción, para verificar la evolución cronológica y los responsables de cada actualización.", requerimiento: "RF14", prioridad: "Baja" },
            { id: "HU-20", titulo: "Gestión de Modalidades Múltiples", descripcion: "Como gestor, quiero seleccionar múltiples modalidades para un mismo establecimiento mediante controles tipo checkbox, para reflejar correctamente su configuración regulatoria completa.", requerimiento: "RF03", prioridad: "Baja" },
            { id: "HU-21", titulo: "Control de Vencimientos", descripcion: "Como coordinador, quiero recibir alertas proactivas sobre inscripciones próximas a vencer (tres meses antes), para planificar oportunamente los procesos de renovación.", requerimiento: "RF09", prioridad: "Baja" },
            { id: "HU-22", titulo: "Diferenciación por Roles", descripcion: "Como administrador, quiero configurar permisos diferenciados según roles específicos (Asignador, Gestor, Notificador, Revisor), para garantizar que cada usuario acceda únicamente a las funcionalidades correspondientes a su responsabilidad.", requerimiento: "RF01", prioridad: "Baja" },
            { id: "HU-23", titulo: "Adaptabilidad Visual", descripcion: "Como usuario, quiero que la interfaz se adapte correctamente a diferentes dispositivos y resoluciones, para poder trabajar eficientemente desde cualquier equipo disponible.", requerimiento: "RF16", prioridad: "Baja" },
            { id: "HU-24", titulo: "Flujos de Aprobación Configurables", descripcion: "Como administrador, quiero definir flujos de aprobación específicos para cada tipo de trámite, para implementar los procesos de revisión adecuados según la complejidad y requisitos normativos.", requerimiento: "RF07", prioridad: "Baja" }
